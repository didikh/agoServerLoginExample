/source.html
[ { label: 'requestUtils.js',
    value: 'D:\\GitHub\\agoServerLoginExample\\libs\\requestUtils.js' },
  { label: 'AGOconnection.js',
    value: 'D:\\GitHub\\agoServerLoginExample\\libs\\AGOconnection.js' } ]
hello
{ cssFile: '//yandex.st/highlightjs/8.0/styles/default.min.css',
  code: '<span class="hljs-comment">/*jslint nomen: true, node: true, devel: true */</span>\r<span class="hljs-pi">\n"use strict"</span>;\r\n\r\n<span class="hljs-keyword">var</span> https = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'https\'</span>),\r\n    url = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'url\'</span>),\r\n    qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'querystring\'</span>),\r\n    <span class="hljs-built_in">JSON</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'JSON\'</span>);\r\n\r\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appLogin</span><span class="hljs-params">(_appid, _appsecret)</span> {</span>\r\n    <span class="hljs-keyword">var</span> _self = <span class="hljs-keyword">this</span>;\r\n    <span class="hljs-keyword">this</span>.APPID = _appid;\r\n    <span class="hljs-keyword">this</span>.APPSECRET = _appsecret;\r\n    <span class="hljs-keyword">this</span>.token = <span class="hljs-literal">null</span>;\r\n    <span class="hljs-keyword">this</span>._refresh = <span class="hljs-literal">null</span>;\r\n    <span class="hljs-keyword">this</span>._getToken = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span> {</span>\r\n        <span class="hljs-comment">// request parameters</span>\r\n        <span class="hljs-keyword">var</span> post_data = qs.stringify({\r\n                <span class="hljs-string">\'client_id\'</span>: _self.APPID,\r\n                <span class="hljs-string">\'client_secret\'</span>: _self.APPSECRET,\r\n                <span class="hljs-string">\'grant_type\'</span>: <span class="hljs-string">\'client_credentials\'</span>\r\n            }),\r\n            <span class="hljs-comment">// request setup</span>\r\n            post_options = {\r\n                host: <span class="hljs-string">\'www.arcgis.com\'</span>,\r\n                port: <span class="hljs-string">\'443\'</span>,\r\n                path: <span class="hljs-string">\'/sharing/oauth2/token\'</span>,\r\n                method: <span class="hljs-string">\'POST\'</span>,\r\n                headers: {\r\n                    <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/x-www-form-urlencoded\'</span>,\r\n                    <span class="hljs-string">\'Content-Length\'</span>: post_data.length\r\n                }\r\n            },\r\n            <span class="hljs-comment">//Make the request</span>\r\n            post_req = https.request(post_options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(postres)</span> {</span>\r\n                postres.setEncoding(<span class="hljs-string">\'utf8\'</span>);\r\n                postres.on(<span class="hljs-string">\'data\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(chunk)</span> {</span>\r\n                    <span class="hljs-keyword">var</span> tokenObj = <span class="hljs-built_in">JSON</span>.parse(chunk);\r\n                    _self.token = tokenObj.access_token;\r\n                    console.log(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>());\r\n                    console.log(tokenObj.access_token);\r\n                    console.log(<span class="hljs-string">\'-------------------\'</span>);\r\n                    <span class="hljs-comment">//We\'ll set the refresh 30 seconds before AGO expiration</span>\r\n                    _self._refresh = setTimeout(_self._getToken, (tokenObj.expires_in - <span class="hljs-number">30</span>) * <span class="hljs-number">1000</span>);\r\n                });\r\n            });\r\n        <span class="hljs-comment">// post the data</span>\r\n        post_req.write(post_data);\r\n        post_req.end();\r\n    };\r\n    <span class="hljs-comment">// createDataObject - auto add token &amp; json parameters</span>\r\n    <span class="hljs-keyword">this</span>.createDataObject = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(obj)</span> {</span>\r\n    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> (obj) === <span class="hljs-string">\'undefined\'</span>) {\r\n        obj = {};\r\n    }\r\n    obj.f = <span class="hljs-string">\'json\'</span>;\r\n    obj.token = _self.token;\r\n    <span class="hljs-keyword">return</span> obj;\r\n};\r\n\r\n    <span class="hljs-comment">//init code here</span>\r\n    <span class="hljs-keyword">this</span>._getToken();\r\n}\r\n\r\n<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">userLogin</span><span class="hljs-params">(_appid, _appsecret)</span> {</span>\r\n    <span class="hljs-keyword">var</span> _self = <span class="hljs-keyword">this</span>;\r\n\r\n    <span class="hljs-keyword">this</span>.APPID = _appid;\r\n    <span class="hljs-keyword">this</span>.APPSECRET = _appsecret;\r\n    <span class="hljs-comment">//    this.logins = {}</span>\r\n    <span class="hljs-comment">//\tthis.token = null;</span>\r\n    <span class="hljs-comment">//    this._refreshToken = null;</span>\r\n    <span class="hljs-comment">//\tthis._refresh = function(refreshToken){};</span>\r\n    <span class="hljs-keyword">this</span>.getToken = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(inUrl, redirectURI, callback, res)</span> {</span>\r\n        <span class="hljs-keyword">var</span> thisUrl = url.parse(inUrl, <span class="hljs-literal">true</span>);\r\n        <span class="hljs-comment">//check for the code query parameter</span>\r\n        <span class="hljs-keyword">if</span> (thisUrl.query.hasOwnProperty(<span class="hljs-string">\'code\'</span>)) {\r\n            <span class="hljs-comment">//Make a request to https://www.arcgis.com/sharing/oauth2/token</span>\r\n            <span class="hljs-keyword">var</span> post_data, post_options, post_req;\r\n            post_data = qs.stringify({\r\n                client_id: _self.APPID,\r\n                client_secret: _self.APPSECRET,\r\n                grant_type: <span class="hljs-string">\'authorization_code\'</span>,\r\n                code: thisUrl.query.code,\r\n                redirect_uri: redirectURI\r\n            });\r\n            <span class="hljs-comment">// request setup</span>\r\n            post_options = {\r\n                host: <span class="hljs-string">\'www.arcgis.com\'</span>,\r\n                port: <span class="hljs-string">\'443\'</span>,\r\n                path: <span class="hljs-string">\'/sharing/oauth2/token\'</span>,\r\n                method: <span class="hljs-string">\'POST\'</span>,\r\n                headers: {\r\n                    <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/x-www-form-urlencoded\'</span>,\r\n                    <span class="hljs-string">\'Content-Length\'</span>: post_data.length\r\n                },\r\n            };\r\n            <span class="hljs-comment">//Make the request</span>\r\n            post_req = https.request(post_options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(postres)</span> {</span>\r\n                postres.setEncoding(<span class="hljs-string">\'utf8\'</span>);\r\n                postres.on(<span class="hljs-string">\'data\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(chunk)</span> {</span>\r\n                    <span class="hljs-comment">//Get the token and refresh token</span>\r\n                    <span class="hljs-comment">//exchange the refresh token for a long life token</span>\r\n                    <span class="hljs-comment">//go to /sharing/rest/accounts/self to get username</span>\r\n                    <span class="hljs-comment">//commit those as keys</span>\r\n                    <span class="hljs-keyword">var</span> tokenObj = <span class="hljs-built_in">JSON</span>.parse(chunk);\r\n                    callback(tokenObj, res);\r\n                });\r\n            });\r\n            <span class="hljs-comment">// post the data</span>\r\n            post_req.write(post_data);\r\n            post_req.end();\r\n        } <span class="hljs-keyword">else</span> {\r\n            callback(<span class="hljs-literal">null</span>, res);\r\n        }\r\n    };\r\n    <span class="hljs-keyword">this</span>.refreshToken = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(refreshToken, callback, res)</span> {</span>\r\n        <span class="hljs-keyword">var</span> post_data, post_options, post_req;\r\n        post_data = qs.stringify({\r\n            client_id: _self.APPID,\r\n            grant_type: <span class="hljs-string">\'refresh_token\'</span>,\r\n            refresh_token: refreshToken\r\n        });\r\n        <span class="hljs-comment">// request setup</span>\r\n        post_options = {\r\n            host: <span class="hljs-string">\'www.arcgis.com\'</span>,\r\n            port: <span class="hljs-string">\'443\'</span>,\r\n            path: <span class="hljs-string">\'/sharing/oauth2/token\'</span>,\r\n            method: <span class="hljs-string">\'POST\'</span>,\r\n            headers: {\r\n                <span class="hljs-string">\'Content-Type\'</span>: <span class="hljs-string">\'application/x-www-form-urlencoded\'</span>,\r\n                <span class="hljs-string">\'Content-Length\'</span>: post_data.length\r\n            },\r\n        };\r\n        <span class="hljs-comment">//Make the request</span>\r\n        post_req = https.request(post_options, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(postres)</span> {</span>\r\n            postres.setEncoding(<span class="hljs-string">\'utf8\'</span>);\r\n            postres.on(<span class="hljs-string">\'data\'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(chunk)</span> {</span>\r\n                <span class="hljs-comment">//Get the token and refresh token</span>\r\n                <span class="hljs-comment">//exchange the refresh token for a long life token</span>\r\n                <span class="hljs-comment">//go to /sharing/rest/accounts/self to get username</span>\r\n                <span class="hljs-comment">//commit those as keys</span>\r\n                <span class="hljs-keyword">var</span> tokenObj = <span class="hljs-built_in">JSON</span>.parse(chunk);\r\n                callback(tokenObj, res);\r\n            });\r\n        });\r\n        <span class="hljs-comment">// post the data</span>\r\n        post_req.write(post_data);\r\n        post_req.end();\r\n\r\n    };\r\n\r\n}\r\n\r\nexports.arcgisURLs = {\r\n    <span class="hljs-string">\'portalURL\'</span>: <span class="hljs-string">\'http://www.arcgis.com/sharing/rest/\'</span>,\r\n    <span class="hljs-string">\'analysisURL\'</span>: <span class="hljs-string">\'http://analysis.arcgis.com/arcgis/rest/services/tasks/GPServer/\'</span>,\r\n    <span class="hljs-string">\'geosearch\'</span>: <span class="hljs-string">\'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/find\'</span>,\r\n    <span class="hljs-string">\'geocode\'</span>: <span class="hljs-string">\'http://geocode.arcgis.com/arcgis/rest/services/World/GeocodeServer/geocodeAddresses\'</span>,\r\n    <span class="hljs-string">\'route\'</span>: <span class="hljs-string">\'http://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World/solve\'</span>,\r\n    <span class="hljs-string">\'search\'</span>: <span class="hljs-string">\'http://www.arcgis.com/sharing/rest/search\'</span>,\r\n    <span class="hljs-string">\'serviceArea\'</span>: <span class="hljs-string">\'http://logistics.arcgis.com/arcgis/rest/services/World/ServiceAreas/GPServer/GenerateServiceAreas\'</span>,\r\n    <span class="hljs-string">\'users\'</span>: <span class="hljs-string">\'http://www.arcgis.com/sharing/rest/content/users/\'</span>\r\n};\r\n\r\nexports.appLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(appid, appsecret)</span> {</span>\r\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> appLogin(appid, appsecret);\r\n};\r\n\r\nexports.userLogin = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(appid, appsecret)</span> {</span>\r\n    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> userLogin(appid, appsecret);\r\n};',
  filelist: 
   [ { label: 'requestUtils.js',
       value: 'D:\\GitHub\\agoServerLoginExample\\libs\\requestUtils.js' },
     { label: 'AGOconnection.js',
       value: 'D:\\GitHub\\agoServerLoginExample\\libs\\AGOconnection.js' } ] }
/search.html
/source.html
[ { label: 'requestUtils.js',
    value: 'D:\\GitHub\\agoServerLoginExample\\libs\\requestUtils.js' },
  { label: 'AGOconnection.js',
    value: 'D:\\GitHub\\agoServerLoginExample\\libs\\AGOconnection.js' } ]
hello
{ cssFile: '//yandex.st/highlightjs/8.0/styles/default.min.css',
  code: '<span class="hljs-comment">/*jslint node: true, devel: true, vars:true, plusplus:true */</span>\r<span class="hljs-pi">\n"use strict"</span>;\r\n\r\n<span class="hljs-keyword">var</span> appInfo = {};\r\nappInfo = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'../appSettings.js\'</span>);\r\n<span class="hljs-comment">// Comment the line above and uncomment the lines below to run interactively</span>\r\n<span class="hljs-comment">//if (process.argv[2] !== undefined || process.argv[3] !== undefined) {</span>\r\n<span class="hljs-comment">//    appInfo = {</span>\r\n<span class="hljs-comment">//        appId : process.argv[2],</span>\r\n<span class="hljs-comment">//        appSecret : process.argv[3]</span>\r\n<span class="hljs-comment">//    };</span>\r\n<span class="hljs-comment">//}</span>\r\n<span class="hljs-comment">//</span>\r\n<span class="hljs-comment">//if (!appInfo.hasOwnProperty(\'appId\') || !appInfo.hasOwnProperty(\'appSecret\')) {</span>\r\n<span class="hljs-comment">//    console.log(\'Missing paramter!\');</span>\r\n<span class="hljs-comment">//    console.log(\'Usage:\');</span>\r\n<span class="hljs-comment">//    console.log(\'node serverUserLogin.js &lt;APPID&gt; &lt;APPSECRET&gt;\');</span>\r\n<span class="hljs-comment">//    process.exit(1);</span>\r\n<span class="hljs-comment">//}</span>\r\n\r\n\r\n<span class="hljs-keyword">var</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'http\'</span>),\r\n    https = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'https\'</span>),\r\n    request = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'request\'</span>),\r\n    url = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'url\'</span>),\r\n    qs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'querystring\'</span>),\r\n    <span class="hljs-built_in">JSON</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'JSON\'</span>),\r\n    fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'fs\'</span>),\r\n    AGO = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'../libs/AGOconnection.js\'</span>),\r\n    reqUtils = <span class="hljs-built_in">require</span>(<span class="hljs-string">\'../libs/requestUtils.js\'</span>).utils();\r\n\r\n<span class="hljs-keyword">var</span> APP = AGO.appLogin(appInfo.appId, appInfo.appSecret);\r\n\r\n<span class="hljs-keyword">var</span> consoleResponse;\r\n\r\n\r\nhttp.createServer(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(req, res)</span> {</span>\r\n    <span class="hljs-comment">//CORS</span>\r\n    <span class="hljs-comment">//RESPONSE = res;</span>\r\n    res.setHeader(<span class="hljs-string">"Access-Control-Allow-Origin"</span>, <span class="hljs-string">"*"</span>);\r\n    res.setHeader(<span class="hljs-string">"Access-Control-Allow-Headers"</span>, <span class="hljs-string">"X-Requested-With"</span>);\r\n    <span class="hljs-keyword">var</span> thisReq, data, item, i,\r\n        uri = url.parse(req.url).pathname,\r\n        query = url.parse(req.url, <span class="hljs-literal">true</span>).query,\r\n        standardResponse, checkJob;\r\n     \r\n    uri = <span class="hljs-string">"/"</span> + uri.substr(uri.indexOf(<span class="hljs-string">\'appLogin\'</span>) + <span class="hljs-number">9</span>);\r\n    console.log(uri);\r\n\r\n    standardResponse = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(err, response, body)</span> {</span>\r\n        <span class="hljs-keyword">if</span> (!err) {\r\n            reqUtils.sendMessage(res, body, <span class="hljs-string">\'json\'</span>);\r\n        } <span class="hljs-keyword">else</span> {\r\n            reqUtils.reportError(res, <span class="hljs-string">\'{error: could not complete function}\'</span>);\r\n        }\r\n    };\r\n\r\n    <span class="hljs-comment">//checkJob - polls the staus of asynchronus tasks, grabs the result when ready</span>\r\n    checkJob = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(taskURL, jobId)</span> {</span>\r\n        <span class="hljs-keyword">var</span> thisReqURL, data, thisReq;\r\n        thisReqURL = taskURL + <span class="hljs-string">"/jobs/"</span> + jobId + <span class="hljs-string">"/"</span>;\r\n        data = APP.createDataObject({\r\n            <span class="hljs-string">\'returnMessages\'</span>: <span class="hljs-literal">true</span>\r\n        });\r\n        thisReq = request({\r\n            url: thisReqURL,\r\n            qs: data\r\n        }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(error, response, body)</span> {</span>\r\n            <span class="hljs-keyword">var</span> bodyObj;\r\n            <span class="hljs-keyword">if</span> (body) {\r\n                bodyObj = <span class="hljs-built_in">JSON</span>.parse(body);\r\n                <span class="hljs-keyword">if</span> (bodyObj.hasOwnProperty(<span class="hljs-string">\'jobStatus\'</span>)) {\r\n                    <span class="hljs-keyword">if</span> ([<span class="hljs-string">\'esriJobSubmitted\'</span>, <span class="hljs-string">\'esriJobWaiting\'</span>, <span class="hljs-string">\'esriJobExecuting\'</span>].indexOf(bodyObj.jobStatus) &gt;= <span class="hljs-number">0</span>) {\r\n                        setTimeout(checkJob, <span class="hljs-number">1000</span>, taskURL, jobId, response);\r\n                    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (bodyObj.jobStatus === <span class="hljs-string">\'esriJobSucceeded\'</span>) {\r\n                        request({\r\n                            <span class="hljs-string">\'url\'</span>: thisReqURL + <span class="hljs-string">\'/results/Service_Areas\'</span>,\r\n                            qs: data\r\n                        }, standardResponse);\r\n                        <span class="hljs-comment">//standardResponse(error, response, body);</span>\r\n                    } <span class="hljs-keyword">else</span> {\r\n                        reqUtils.reportError(res, <span class="hljs-string">\'Unspecifed error processing\'</span>);\r\n                    }\r\n                } <span class="hljs-keyword">else</span> {\r\n                    reqUtils.reportError(res, <span class="hljs-string">\'Unspecifed error processing\'</span>);\r\n                }\r\n            }\r\n        });\r\n    };\r\n\r\n    <span class="hljs-keyword">switch</span> (uri) {\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/\'</span>:\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/index.html\'</span>:\r\n        reqUtils.getFile(res, <span class="hljs-string">\'index.jade\'</span>);\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-comment">/*\r\n        token - Return the token the app is using\r\n    BAD EXAMPLE - NEVER PUT IN YOUR OWN APP\r\n        You would normally *NEVER* have this operation in a web\r\n        application - providing the token to clients gives the client\r\n        the permissions of the application directly until token expiry\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/token\'</span>:\r\n        reqUtils.sendMessage(res, APP.token, <span class="hljs-string">\'text\'</span>);\r\n        <span class="hljs-keyword">break</span>;\r\n\r\n    <span class="hljs-comment">/*\r\n        search - Search AGO for items.  \r\n        Note that this returns only publicly shared items\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/search\'</span>:\r\n        <span class="hljs-keyword">var</span> q;\r\n        q = APP.createDataObject({\r\n            <span class="hljs-string">\'q\'</span>: query.q\r\n        });\r\n        request({\r\n            url: AGO.arcgisURLs.search,\r\n            qs: q\r\n        }, standardResponse);\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-comment">/*\r\n        getItem - Get item information\r\n        works for items shared publicly or owned by application owner\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/getItem\'</span>:\r\n        item = query.item || <span class="hljs-string">\'8543d1c1386f47c3b2bdac110f6015e7\'</span>;\r\n        data = APP.createDataObject();\r\n        thisReq = request({\r\n            <span class="hljs-string">\'url\'</span>: AGO.arcgisURLs.portalURL + <span class="hljs-string">\'content/items/\'</span> + item,\r\n            <span class="hljs-string">\'qs\'</span>: data\r\n        }, standardResponse);\r\n        <span class="hljs-keyword">break</span>;\r\n\r\n        <span class="hljs-comment">/*\r\n        getData - run a query against a hosted feature service\r\n        works for items shared publicly or owned by application owner\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/getData\'</span>:\r\n        item = query.item || <span class="hljs-string">\'8543d1c1386f47c3b2bdac110f6015e7\'</span>;\r\n        data = APP.createDataObject({\r\n            <span class="hljs-string">\'where\'</span>: <span class="hljs-string">\'1=1\'</span>,\r\n            <span class="hljs-string">\'outFields\'</span>: <span class="hljs-string">\'*\'</span>,\r\n            <span class="hljs-string">\'returnGeometry\'</span>: <span class="hljs-string">\'false\'</span>\r\n        });\r\n        thisReq = request({\r\n            <span class="hljs-string">\'url\'</span>: AGO.arcgisURLs.portalURL + <span class="hljs-string">\'content/items/\'</span> + item,\r\n            <span class="hljs-string">\'qs\'</span>: data\r\n        }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(err, resp, body)</span> {</span>\r\n            <span class="hljs-keyword">var</span> itemObj;\r\n            itemObj = <span class="hljs-built_in">JSON</span>.parse(body);\r\n            request({\r\n                <span class="hljs-string">\'url\'</span>: itemObj.url + <span class="hljs-string">\'/0/query\'</span>,\r\n                <span class="hljs-string">\'qs\'</span>: data\r\n            }, standardResponse);\r\n\r\n        });\r\n        <span class="hljs-keyword">break</span>;\r\n\r\n    <span class="hljs-comment">/*\r\n        geocode - Single address geocode\r\n        This is a free operation in ArcGIS Online\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/geocode\'</span>:\r\n        <span class="hljs-keyword">var</span> address;\r\n        address = query.address || <span class="hljs-string">\'8615 Westwood Center Drive, Vienna, VA 22182\'</span>;\r\n        data = APP.createDataObject({\r\n            <span class="hljs-string">\'text\'</span>: address\r\n        });\r\n        thisReq = request({\r\n            <span class="hljs-string">\'url\'</span>: AGO.arcgisURLs.geosearch,\r\n            qs: data\r\n        }, standardResponse);\r\n        <span class="hljs-keyword">break</span>;\r\n        <span class="hljs-comment">/*\r\n        batchGeocode - Multiple address geocode\r\n        This is not a free operation\r\n        Addresses are seperated by semicolon\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/batchGeocode\'</span>:\r\n        <span class="hljs-keyword">var</span> inAddresses, addressList, addressObj;\r\n        inAddresses = query.addresses || <span class="hljs-string">\'380 New York St, Redlands, CA 92373;8615 Westwood Center Drive, Vienna, VA 22182\'</span>;\r\n        <span class="hljs-comment">//Process into recordsets</span>\r\n        addressList = inAddresses.split(<span class="hljs-string">\';\'</span>);\r\n        addressObj = {\r\n            <span class="hljs-string">"records"</span>: []\r\n        };\r\n        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; addressList.length; i = i + <span class="hljs-number">1</span>) {\r\n            addressObj.records.push({\r\n                <span class="hljs-string">"attributes"</span>: {\r\n                    <span class="hljs-string">"OBJECTID"</span>: i + <span class="hljs-number">1</span>,\r\n                    <span class="hljs-string">"SingleLine"</span>: addressList[i]\r\n                }\r\n            });\r\n        }\r\n        (<span class="hljs-built_in">JSON</span>.stringify(addressObj));\r\n        data = APP.createDataObject({\r\n            <span class="hljs-string">\'addresses\'</span>: <span class="hljs-built_in">JSON</span>.stringify(addressObj)\r\n        });\r\n        thisReq = request({\r\n            <span class="hljs-string">\'url\'</span>: AGO.arcgisURLs.geocode,\r\n            qs: data\r\n        }, standardResponse);\r\n        <span class="hljs-keyword">break</span>;\r\n        <span class="hljs-comment">/*\r\n        route2 - generate a route between 2 addresses\r\n        this takes two addresses (from &amp; to) as parameters,\r\n        geocodes them, and then routes between them\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/route2\'</span>:\r\n        <span class="hljs-keyword">var</span> fromAdddress, toAddress, toData, fromData, g, requestURLs, requestData, geoSearchResults = [];\r\n        fromAdddress = query.from || <span class="hljs-string">\'8615 Westwood Center Drive, Vienna VA 22182\'</span>;\r\n        toAddress = query.to || <span class="hljs-string">\'801 Mt. Vernon Place NW, Washington DC 20001\'</span>;\r\n        fromData = APP.createDataObject({\r\n            <span class="hljs-string">\'text\'</span>: fromAdddress\r\n        });\r\n        toData = APP.createDataObject({\r\n            <span class="hljs-string">\'text\'</span>: toAddress\r\n        });\r\n        requestURLs = [AGO.arcgisURLs.geosearch, AGO.arcgisURLs.geosearch];\r\n        requestData = [fromData, toData];\r\n        reqUtils.multipleRequests(requestURLs, requestData, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(responses)</span> {</span>\r\n            <span class="hljs-comment">//var toRes, fromRes, toStop, fromStop, </span>\r\n            <span class="hljs-keyword">var</span> removeThese = [<span class="hljs-string">\'Score\'</span>, <span class="hljs-string">\'Addr_Type\'</span>],\r\n                stops = [],\r\n                r, thisStop, thisRes, a, data, e, errRes;\r\n            <span class="hljs-keyword">if</span> (reqUtils.checkForErrors(responses)) {\r\n                <span class="hljs-keyword">for</span> (r = <span class="hljs-number">0</span>; r &lt; responses.length; r++) {\r\n                    thisRes = <span class="hljs-built_in">JSON</span>.parse(responses[r].body);\r\n                    thisStop = thisRes.locations[<span class="hljs-number">0</span>].feature;\r\n                    thisStop.attributes.name = thisRes.locations[<span class="hljs-number">0</span>].name;\r\n                    <span class="hljs-keyword">for</span> (a = <span class="hljs-number">0</span>; a &lt; removeThese.length; a++) {\r\n                        <span class="hljs-keyword">if</span> (thisStop.attributes.hasOwnProperty(removeThese[a])) {\r\n                            <span class="hljs-keyword">delete</span> thisStop.attributes[removeThese[a]];\r\n                        }\r\n                    }\r\n                    stops.push(thisStop);\r\n                }\r\n                data = APP.createDataObject({\r\n                    stops: <span class="hljs-built_in">JSON</span>.stringify({\r\n                        features: stops\r\n                    })\r\n                });\r\n                thisReq = request({\r\n                    <span class="hljs-string">\'url\'</span>: AGO.arcgisURLs.route,\r\n                    qs: data\r\n                }, standardResponse);\r\n            } <span class="hljs-keyword">else</span> {\r\n                <span class="hljs-keyword">for</span> (e = <span class="hljs-number">0</span>; e &lt; responses.length; e++) {\r\n                    <span class="hljs-keyword">if</span> (responses[e].error) {\r\n                        errRes = responses[e];\r\n                    }\r\n                }\r\n                reqUtils.reportError(errRes, <span class="hljs-string">\'Invalid geocode result\'</span>);\r\n            }\r\n\r\n        });\r\n\r\n        <span class="hljs-keyword">break</span>;\r\n        <span class="hljs-comment">/*\r\n        drivetime - generate a drivetime polygon\r\n        Note that this is an asynchronus operation, so we\r\n        need to use the checkJob routine to poll AGO for \r\n        completion.  After completion, we can retrieve the \r\n        drivetime polygon.\r\n    */</span>\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/drivetime\'</span>:\r\n        <span class="hljs-keyword">var</span> name, FC, distVals, reqData, reqOptions, x, y;\r\n        <span class="hljs-comment">//Test point</span>\r\n        x = query.x || -<span class="hljs-number">77.25</span>;\r\n        y = query.y || <span class="hljs-number">38.92</span>;\r\n\r\n        <span class="hljs-comment">//Form the FeatureCollection from the inputs</span>\r\n        name = query.name || <span class="hljs-string">\'Point\'</span>;\r\n        FC = {\r\n            <span class="hljs-string">"spatialReference"</span>: {\r\n                <span class="hljs-string">"wkid"</span>: <span class="hljs-number">4326</span>,\r\n                <span class="hljs-string">"latestWkid"</span>: <span class="hljs-number">4326</span>\r\n            },\r\n            <span class="hljs-string">"features"</span>: [\r\n                {\r\n                    geometry: {\r\n                        <span class="hljs-string">"x"</span>: <span class="hljs-built_in">parseFloat</span>(x),\r\n                        <span class="hljs-string">"y"</span>: <span class="hljs-built_in">parseFloat</span>(y)\r\n                    },\r\n                    attributes: {\r\n                        <span class="hljs-string">"name"</span>: name\r\n                    }\r\n                }\r\n            ]\r\n        };\r\n        <span class="hljs-comment">//Other parameters</span>\r\n        <span class="hljs-comment">//Distance - comes in as a comma-seperated string; split into units and run parseFloat on them</span>\r\n        distVals = query.distance || <span class="hljs-string">\'5\'</span>;\r\n        distVals = distVals.split(<span class="hljs-string">\',\'</span>).map(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(val)</span> {</span>\r\n            <span class="hljs-keyword">return</span> <span class="hljs-built_in">parseFloat</span>(val);\r\n        });\r\n        data = APP.createDataObject({\r\n            <span class="hljs-string">"facilities"</span>: <span class="hljs-built_in">JSON</span>.stringify(FC),\r\n            <span class="hljs-string">"break_values"</span>: distVals.join(<span class="hljs-string">\' \'</span>),\r\n            <span class="hljs-string">"break_units"</span>: <span class="hljs-string">"Minutes"</span>\r\n\r\n        });\r\n        thisReq = request({\r\n            url: AGO.arcgisURLs.serviceArea + <span class="hljs-string">\'/submitJob\'</span>,\r\n            qs: data\r\n        }, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(err, response, body)</span> {</span>\r\n            <span class="hljs-keyword">var</span> thisJobInfo = <span class="hljs-built_in">JSON</span>.parse(body);\r\n            <span class="hljs-keyword">if</span> (thisJobInfo.jobId) {\r\n                checkJob(AGO.arcgisURLs.serviceArea, thisJobInfo.jobId);\r\n            } <span class="hljs-keyword">else</span> {\r\n                reqUtils.sendMessage(res, body, <span class="hljs-string">\'json\'</span>);\r\n            }\r\n        });\r\n\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/buffer\'</span>:\r\n        \r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/customEnrich\'</span>:\r\n        <span class="hljs-comment">//need to get input shape</span>\r\n        console.log(query);\r\n        <span class="hljs-keyword">var</span> geom = query.geometry, dist = query.distance;\r\n        <span class="hljs-comment">//buffer</span>\r\n<span class="hljs-comment">//        request({</span>\r\n<span class="hljs-comment">//            url: AGO.arcgisURLs.analysisURL + \'CreateBuffers/submitJob\',</span>\r\n<span class="hljs-comment">//            qs: ""</span>\r\n<span class="hljs-comment">//        }, function(err, response, body) {</span>\r\n<span class="hljs-comment">//            var thisJobInfo = JSON.parse(body);</span>\r\n<span class="hljs-comment">//            if (thisJobInfo.jobId) {</span>\r\n<span class="hljs-comment">//                checkJob(AGO.arcgisURLs.analysisURL + \'CreateBuffers\', thisJobInfo.jobId, res);</span>\r\n<span class="hljs-comment">//            } else {</span>\r\n<span class="hljs-comment">//                reqUtils.sendMessage(res, body, \'json\');</span>\r\n<span class="hljs-comment">//                }</span>\r\n<span class="hljs-comment">//        });</span>\r\n            reqUtils.sendMessage(res, {message:<span class="hljs-string">\'received\'</span>}, <span class="hljs-string">\'json\'</span>);\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/source.html\'</span>:\r\n        <span class="hljs-keyword">var</span> file, css, fileList = [];\r\n        file = query.file;\r\n        css = query.css || <span class="hljs-string">\'default\'</span>;\r\n        <span class="hljs-comment">//Build the file list</span>\r\n        <span class="hljs-keyword">var</span> thisDir = fs.readdirSync(<span class="hljs-string">"."</span>);\r\n        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> f; f &lt; thisDir.length; f++) {\r\n            <span class="hljs-keyword">var</span> file = thisDir[f];\r\n            console.log(file);\r\n            <span class="hljs-keyword">if</span> (file.substr(-<span class="hljs-number">3</span>) === <span class="hljs-string">".js"</span>) {\r\n                fileList.push(file);\r\n        }\r\n        fileList.push(<span class="hljs-string">\'requestUtils.js\'</span>);\r\n        fileList.push(<span class="hljs-string">\'AGOconnection.js\'</span>);\r\n        console.log(fileList);\r\n        reqUtils.getSource(res, file, css, fileList);\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-keyword">case</span> <span class="hljs-string">\'/favicon.ico\'</span>:\r\n        res.end();\r\n        <span class="hljs-keyword">break</span>;\r\n    <span class="hljs-keyword">default</span>:\r\n        reqUtils.getFile(res, uri.substr(<span class="hljs-number">1</span>));\r\n        <span class="hljs-keyword">break</span>;\r\n    }\r\n}).listen(process.env.PORT);\r\n\r\n\r\n<span class="hljs-comment">//--- HELPER FUNCTIONS ---//</span>\r\n\r\n\r\n<span class="hljs-comment">// consoleResponse - logs results to the console</span>\r\nconsoleResponse = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(err, body)</span> {</span>\r\n    console.log(<span class="hljs-string">\'Error:\'</span>);\r\n    console.log(err);\r\n    console.log(<span class="hljs-string">\'Body\'</span>);\r\n    <span class="hljs-keyword">if</span> (body) {\r\n        <span class="hljs-keyword">var</span> c = (body.length &gt; <span class="hljs-number">500</span>) ? <span class="hljs-number">500</span> : body.length;\r\n        console.log(body.substr(<span class="hljs-number">0</span>, c));\r\n    }\r\n    console.log(<span class="hljs-string">\'----------------\'</span>);\r\n};\r\n\r\n<span class="hljs-comment">//// reportError - return an error</span>\r\n<span class="hljs-comment">//reportError = function (res, comment) {</span>\r\n<span class="hljs-comment">//    res.writeHead(400);</span>\r\n<span class="hljs-comment">//    res.write(comment);</span>\r\n<span class="hljs-comment">//    res.end();</span>\r\n<span class="hljs-comment">//};</span>',
  filelist: 
   [ { label: 'requestUtils.js',
       value: 'D:\\GitHub\\agoServerLoginExample\\libs\\requestUtils.js' },
     { label: 'AGOconnection.js',
       value: 'D:\\GitHub\\agoServerLoginExample\\libs\\AGOconnection.js' } ] }
